{"version":3,"sources":["store/actions/errorHandlerActions.js","axios/axios.js","store/actions/repositoryActions.js","components/Modals/SuccessModal/SuccessModal.js","components/Modals/ErrorModal/ErrorModal.js","UI/Inputs/Input.js","Utility/InputConfiguration.js","Utility/FormUtility.js","constainers/Owner/UpdateOwner/UpdateOwner.js"],"names":["closeErrorModal","error","type","actionTypes","handleHTTPError","props","response","status","execute404Handler","execute500Handler","executeOtherErrorHandler","instance","axios","create","baseURL","headers","headerType","getData","url","console","log","dispatch","get","then","data","catch","errorHandlerActions","postData","obj","post","postDataSuccess","putData","put","putDataSuccess","deleteData","delete","deleteDataSuccess","closeSuccessModal","SuccessModal","show","backdrop","Header","modalHeaderText","Body","modalBodyText","Footer","bsStyle","onClick","successClick","okButtonText","ErrorModal","closeModal","input","inputField","errorMessage","invalid","shouldValidate","touched","elementType","controlId","id","componentClass","ControlLabel","sm","label","value","onChange","changed","onBlur","blur","selected","dateFormat","readOnly","className","showYearDropdown","dropdownMode","returnInputConfiguration","name","element","validation","required","valid","address","maxLength","dateOfBirth","moment","convertStateToArrayOfFormObjects","formObject","formElementsArray","key","push","config","executeValidationAndReturnFormElement","event","updatedOwnerForm","formElement","target","validationResponse","checkValidity","isValid","validationObject","trim","length","countInvalidElements","ownerForm","UpdateOwner","state","isFormValid","componentWillMount","setState","componentDidMount","match","params","onGetOwnerById","componentWillReceiveProps","nextProps","nameObject","dateObject","addressObject","updateOwner","preventDefault","ownerToUpdate","onUpdateOwner","redirectToOwnerList","history","handleChangeEvent","formUtilityActions","counter","this","horizontal","onSubmit","map","mdOffset","md","disabled","showSuccessModal","onCloseSuccessModal","showErrorModal","onCloseErrorModal","Component","connect","repository","errorHandler","repositoryActions","owner"],"mappings":"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","file":"static/js/9.46bffc09.chunk.js","sourcesContent":["import * as actionTypes from './actionTypes';\r\n\r\nconst execute404Handler = (props) => {\r\n    return {\r\n        type: actionTypes.HTTP_404_ERROR,\r\n        props: props\r\n    }\r\n}\r\n\r\nconst execute500Handler = (props) => {\r\n    return {\r\n        type: actionTypes.HTTP_500_ERROR,\r\n        props: props\r\n    }\r\n}\r\n\r\nconst executeOtherErrorHandler = (error) => {\r\n    return {\r\n        type: actionTypes.HTTP_OTHER_ERROR,\r\n        error: error\r\n    }\r\n}\r\n\r\n// no error\r\nexport const closeErrorModal = (error) => {\r\n    return {\r\n        type: actionTypes.CLOSE_ERROR_MODAL\r\n    }\r\n}\r\n\r\nexport const handleHTTPError = (error, props) => {\r\n    if (error.response.status === 404) {\r\n        return execute404Handler(props);\r\n    }\r\n    else if (error.response.status === 500) {\r\n        return execute500Handler(props);\r\n    }\r\n    else {\r\n        return executeOtherErrorHandler(error);\r\n    }\r\n}","import axios from 'axios';\r\n\r\n// axios custom instance: baseUrl and headers properties\r\n// use: axios.get('/api/owner')\r\nconst instance = axios.create({\r\n    //baseURL: 'http://localhost:5000',\r\n    baseURL: 'https://brokerage.herokuapp.com',\r\n    headers:{\r\n        headerType: 'example header type'\r\n    }\r\n});\r\n\r\nexport default instance;","import * as actionTypes from './actionTypes';\r\nimport axios from '../../axios/axios';\r\nimport * as errorHandlerActions from './errorHandlerActions';\r\n\r\nconst getDataSuccess = (data) => {\r\n    return {\r\n        type: actionTypes.GET_DATA_SUCCESS,\r\n        data: data\r\n    }\r\n}\r\n\r\n// counld be response, or resp\r\nexport const getData = (url, props) => {\r\n    console.log('get data')\r\n    return (dispatch) => {\r\n        console.log('before get data')\r\n        axios.get(url)\r\n        .then(response => {\r\n            console.log(response)\r\n            dispatch(getDataSuccess(response.data))\r\n        }).catch(error =>{\r\n            //TODO: handle error when implement\r\n            dispatch(errorHandlerActions.handleHTTPError(error, props));\r\n        })\r\n    }\r\n}\r\nconst postDataSuccess = (response) => {\r\n    return {\r\n        type: actionTypes.POST_DATA_SUCCESS,\r\n        response: response \r\n    }\r\n}\r\n\r\n// counld be response, or resp\r\nexport const postData = (url, obj, props) => {\r\n    return (dispatch) => {\r\n        console.log(\"dispatch= \")\r\n        console.log(\"url=\" + url)\r\n        console.log(obj)\r\n        axios.post(url, obj)\r\n        .then(response => {\r\n            console.log(response)\r\n            dispatch(postDataSuccess(response))\r\n        }).catch(error =>{\r\n            console.log(\"error.response= \", error.response)\r\n            //TODO: handle error when implement\r\n            dispatch(errorHandlerActions.handleHTTPError(error, props));\r\n        })\r\n    }\r\n}\r\n\r\nconst putDataSuccess = (response) => {\r\n    return {\r\n        type: actionTypes.PUT_DATA_SUCCESS,\r\n        response: response \r\n    }\r\n}\r\n\r\n// counld be response, or resp\r\nexport const putData = (url, obj, props) => {\r\n    return (dispatch) => {\r\n        axios.put(url, obj)\r\n        .then(response => {\r\n            dispatch(putDataSuccess(response))\r\n        }).catch(error =>{\r\n            //TODO: handle error when implement\r\n            dispatch(errorHandlerActions.handleHTTPError(error, props));\r\n        })\r\n    }\r\n}\r\n\r\nconst deleteDataSuccess = (response) => {\r\n    return {\r\n        type: actionTypes.DELETE_DATA_SUCCESS,\r\n        response: response \r\n    }\r\n}\r\n\r\n// counld be response, or resp\r\nexport const deleteData = (url, props) => {\r\n    return (dispatch) => {\r\n        axios.delete(url)\r\n        .then(response => {\r\n            dispatch(deleteDataSuccess(response))\r\n        }).catch(error =>{\r\n            //TODO: handle error when implement\r\n            dispatch(errorHandlerActions.handleHTTPError(error, props));\r\n        })\r\n    }\r\n}\r\n\r\n// take 2 params: props, url\r\n// return an object: send them to reducer to change reducer\r\nexport const closeSuccessModal = (props, url) => {\r\n    return {\r\n        type: actionTypes.CLOSE_SUCCESS_MODAL,\r\n        props: props,\r\n        url: url\r\n    }\r\n}","import React, { Fragment } from 'react';\r\nimport { Modal, Button } from 'react-bootstrap';\r\nimport '../ModalStyles.css';\r\n\r\n// Redux: showsuccessfully: props.show\r\n//props.successClick: method click on success modal +\r\n// like pop window\r\nconst SuccessModal = (props) => {\r\n    return (\r\n        <Fragment>\r\n            <Modal show={props.show} backdrop='static'>\r\n                <Modal.Header>\r\n                    {props.modalHeaderText}\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <p>{props.modalBodyText}</p>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button bsStyle=\"success\" onClick={props.successClick}>{props.okButtonText}</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default SuccessModal;","import React, { Fragment } from 'react';\r\nimport { Modal, Button } from 'react-bootstrap';\r\nimport '../ModalStyles.css';\r\n\r\n//onClick={props.closeModal}: show error modal bootstrap\r\nconst ErrorModal = (props) => {\r\n    return (\r\n        <Fragment>\r\n            <Modal show={props.show} backdrop='static'>\r\n                <Modal.Header>\r\n                    {props.modalHeaderText}\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <p>{props.modalBodyText}</p>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button bsStyle=\"danger\" onClick={props.closeModal}>{props.okButtonText}</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default ErrorModal;","import React, { Fragment } from 'react';\r\nimport { FormGroup, Col, FormControl, ControlLabel } from 'react-bootstrap';\r\nimport DatePicker from 'react-datepicker';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport './Input.css';\r\n\r\nconst input = (props) => {\r\n    let inputField = null;\r\n    let errorMessage = null;\r\n\r\n    if(props.invalid && props.shouldValidate && props.touched){\r\n        errorMessage = (<em>{props.errorMessage}</em>);\r\n    }\r\n\r\n    // onBlur={props.blur}: input blur\r\n    // onfocus: run when the cursor into that field\r\n    // onblur: run when out of that field\r\n    // DatePicker: create a calender and selecte the date\r\n    switch (props.elementType) {\r\n        case 'input':\r\n            inputField = (\r\n                <FormGroup controlId={props.id}>\r\n                    <Col componentClass={ControlLabel} sm={2}>\r\n                        {props.label}\r\n                    </Col>\r\n                    <Col sm={6}>\r\n                        <FormControl type={props.type} value={props.value} onChange={props.changed} onBlur={props.blur} />\r\n                    </Col>\r\n                    <Col>\r\n                        <em>{errorMessage}</em>\r\n                    </Col>\r\n                </FormGroup>\r\n            )\r\n            break;\r\n        case 'datePicker':\r\n            inputField = (\r\n                <FormGroup controlId={props.id}>\r\n                    <Col componentClass={ControlLabel} sm={2}>\r\n                        {props.label}\r\n                    </Col>\r\n                    <Col sm={6}>\r\n                        <DatePicker selected={props.value} dateFormat=\"MM/DD/YYYY\" readOnly\r\n                            onChange={props.changed} className='datePickerControl'\r\n                            showYearDropdown dropdownMode=\"select\"/>\r\n                    </Col>\r\n                    <Col>\r\n                        <em>{errorMessage}</em>\r\n                    </Col>\r\n                </FormGroup>\r\n            )\r\n            break;\r\n        default: inputField = null;\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            {inputField}\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default input;","import moment from 'moment';\r\n\r\n// it is better clients side validation or server validation? both\r\n// clients side: vali nice use interface\r\n// server side: validation:\r\n// name address dateofBirth: validation true? false? \r\n// touched: use move the cursor in that field\r\n// if touched is not validate \r\n// value: moment(), for date\r\nexport const returnInputConfiguration = () => {\r\n    return {\r\n        name: {\r\n            element: 'input', type: 'text', value: '',\r\n            validation: { required: true }, valid: false, touched: false,\r\n            errorMessage: '', label: 'Name:'\r\n        },\r\n        address: {\r\n            element: 'input', type: 'text', value: '',\r\n            validation: { required: true, maxLength: 60 }, valid: false, touched: false,\r\n            errorMessage: '', label: 'Address:'\r\n        },\r\n        dateOfBirth: {\r\n            element: 'datePicker', type: 'text', value: moment(),\r\n            valid: true, touched: false,\r\n            errorMessage: '', label: 'Date of birth:'\r\n        }\r\n    }\r\n}","export const convertStateToArrayOfFormObjects = (formObject) => {\r\n    const formElementsArray = [];\r\n    for (let key in formObject) {\r\n        formElementsArray.push({\r\n            id: key,\r\n            config: formObject[key]\r\n        });\r\n    }\r\n\r\n    return formElementsArray;\r\n}\r\n\r\n// copy the form triggle the event\r\n// copy the form element chanaged, get value from the form element: id, dateofbirth, value is the event\r\n// == true: \r\n// validation: inputConfiguration.js\r\n// return isValid, errormessage, then return formElement\r\nexport const executeValidationAndReturnFormElement = (event, updatedOwnerForm, id) => {\r\n    let formElement = { ...updatedOwnerForm[id] };\r\n    formElement.value = id === 'dateOfBirth' ? event : event.target.value;\r\n    formElement.touched = true;\r\n\r\n    const validationResponse = checkValidity(formElement.value, formElement.validation);\r\n\r\n    formElement.valid = validationResponse.isValid;\r\n    formElement.errorMessage = validationResponse.errorMessage;\r\n\r\n    return formElement;\r\n}\r\n\r\n// get value, and validation\r\n// check required, isValid...\r\n// check main line\r\nconst checkValidity = (value, validation) => {\r\n    let validationObject = {\r\n        isValid: true,\r\n        errorMessage: ''\r\n    };\r\n\r\n    if (validation) {\r\n        if (validation.required) {\r\n            validationObject.isValid = value.trim() !== '';\r\n            validationObject.errorMessage = validationObject.isValid ? '' : 'Field is required';\r\n        }\r\n\r\n        if (validationObject.isValid && validation.maxLength) {\r\n            validationObject.isValid = value.length <= validation.maxLength;\r\n            validationObject.errorMessage = `Not allowed more than ${validation.maxLength} characters`;\r\n        }\r\n\r\n        return validationObject;\r\n    }\r\n    else {\r\n        return validationObject;\r\n    }\r\n}\r\n\r\n// handle change: do validation\r\n// looping each elements form add one to countInvalidElements\r\n// ==0 if are +1, \r\n// 0 or 1\r\nexport const countInvalidElements = (ownerForm) => {\r\n    let countInvalidElements = 0;\r\n    for (let element in ownerForm) {\r\n        if (!ownerForm[element].valid) {\r\n            countInvalidElements = countInvalidElements + 1;\r\n            break;\r\n        }\r\n    }\r\n    return countInvalidElements;\r\n}\r\n","import React, { Component } from 'react';\r\nimport Input from '../../../UI/Inputs/Input';\r\nimport { Form, Well, Button, FormGroup, Col } from 'react-bootstrap';\r\nimport { returnInputConfiguration } from '../../../Utility/InputConfiguration';\r\nimport * as formUtilityActions from '../../../Utility/FormUtility'\r\nimport * as repositoryActions from '../../../store/actions/repositoryActions';\r\nimport * as errorHandlerActions from '../../../store/actions/errorHandlerActions';\r\nimport {connect} from 'react-redux'\r\nimport moment from 'moment'\r\nimport SuccessModal from '../../../components/Modals/SuccessModal/SuccessModal';\r\nimport ErrorModal from '../../../components/Modals/ErrorModal/ErrorModal';\r\n\r\n\r\nclass UpdateOwner extends Component {\r\n    state = {\r\n        ownerForm: {},\r\n        isFormValid: true\r\n    }\r\n\r\n    // will fire component\r\n    componentWillMount = () => {\r\n        this.setState({ ownerForm: returnInputConfiguration() });\r\n    }\r\n\r\n    // like useEffect to fetch data\r\n    // get id: 3 ways: query, url, body, match\r\n    // set up api url\r\n    // onGetownerbyid: \r\n    // dispatch getdata()\r\n    // loaded\r\n    componentDidMount = () =>{\r\n        const id = this.props.match.params.id;\r\n        const url = '/api/owner/' + id;\r\n        this.props.onGetOwnerById(url, {...this.props});\r\n    }\r\n\r\n    // nextPorps: fire before the components recieve the props\r\n    // on the way, it is called nextProps\r\n    //UNSA\r\n    componentWillReceiveProps = (nextProps) => {\r\n        const updatedOwnerForm = { ...this.state.ownerForm };\r\n        let nameObject = { ...updatedOwnerForm.name };\r\n        let dateObject = { ...updatedOwnerForm.dateOfBirth };\r\n        let addressObject = { ...updatedOwnerForm.address };\r\n    \r\n        nameObject.value = nextProps.data.name;\r\n        nameObject.valid = true;\r\n        dateObject.value = moment(nextProps.data.dateOfBirth);\r\n        addressObject.value = nextProps.data.address;\r\n        addressObject.valid = true;\r\n    \r\n        updatedOwnerForm['name'] = nameObject;\r\n        updatedOwnerForm['dateOfBirth'] = dateObject;\r\n        updatedOwnerForm['address'] = addressObject;\r\n        this.setState({ ownerForm: updatedOwnerForm });\r\n    }\r\n\r\n    updateOwner = (event) => {\r\n        event.preventDefault();\r\n    \r\n        const ownerToUpdate = {\r\n            name: this.state.ownerForm.name.value,\r\n            dateOfBirth: this.state.ownerForm.dateOfBirth.value,\r\n            address: this.state.ownerForm.address.value\r\n        }\r\n    \r\n        const url = \"/api/owner/\" + this.props.data.id;\r\n    \r\n        this.props.onUpdateOwner(url, ownerToUpdate, {...this.props});\r\n    }\r\n\r\n    // cancel: \r\n    // \r\n    redirectToOwnerList = () => {\r\n        this.props.history.push('/owner-List');\r\n    }\r\n\r\n    // 2nd line: for id, event and id changed, called return new copy\r\n    // for uility form \r\n    handleChangeEvent = (event, id) => {\r\n        const updatedOwnerForm = { ...this.state.ownerForm };\r\n        updatedOwnerForm[id] = formUtilityActions.executeValidationAndReturnFormElement(event, updatedOwnerForm, id);\r\n    \r\n        const counter = formUtilityActions.countInvalidElements(updatedOwnerForm);\r\n        \r\n        // sending the object\r\n        // counter ===0 ture need to close the\r\n        // != 0, the counter false \r\n        // form changed, \r\n        this.setState({ownerForm: updatedOwnerForm, \r\n                        isFormValid: counter === 0});\r\n    }\r\n\r\n    render() {\r\n        const formElementsArray = formUtilityActions.convertStateToArrayOfFormObjects({ ...this.state.ownerForm });\r\n\r\n        return (\r\n            <Well>\r\n                <Form horizontal onSubmit={this.updateOwner}>\r\n                    {\r\n                    formElementsArray.map(element => {\r\n                        return <Input key={element.id} elementType={element.config.element}\r\n                            id={element.id} label={element.config.label}\r\n                            type={element.config.type} value={element.config.value}\r\n                            changed={(event) => this.handleChangeEvent(event, element.id)}\r\n                            errorMessage={element.config.errorMessage} invalid={!element.config.valid}\r\n                            shouldValidate={element.config.validation}\r\n                            touched={element.config.touched}\r\n                            blur={(event) => this.handleChangeEvent(event, element.id)} />\r\n                    })\r\n                    }\r\n                    <br />\r\n                    <FormGroup>\r\n                    <Col mdOffset={6} md={1}>\r\n                        <Button type='submit' bsStyle='info' disabled={!this.state.isFormValid}>Update</Button>\r\n                    </Col>\r\n                    <Col md={1}>\r\n                        <Button bsStyle='danger' onClick={this.redirectToOwnerList}>Cancel</Button>\r\n                    </Col>\r\n                    </FormGroup>\r\n                </Form>\r\n                <SuccessModal show={this.props.showSuccessModal} modalHeaderText={'Success message'}\r\n                    modalBodyText={'Action completed successfully'}\r\n                    okButtonText={'OK'}\r\n                    successClick={() => this.props.onCloseSuccessModal('/owner-List', { ...this.props })} />\r\n                <ErrorModal show={this.props.showErrorModal} modalHeaderText={'Error message'}\r\n                    modalBodyText={this.props.errorMessage}\r\n                    okButtonText={'OK'}\r\n                    closeModal={() => this.props.onCloseErrorModal()} />\r\n            </Well>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        data: state.repository.data,\r\n        showSuccessModal: state.repository.showSuccessModal,\r\n        showErrorModal: state.errorHandler.showErrorModal,\r\n        errorMessage: state.errorHandler.errorMessage\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onGetOwnerById: (url, props) => dispatch(repositoryActions.getData(url, props)),\r\n        onUpdateOwner: (url, owner, props) => dispatch(repositoryActions.putData(url, owner, props)),\r\n        onCloseSuccessModal: (url, props) => dispatch(repositoryActions.closeSuccessModal(props, url)),\r\n        onCloseErrorModal: () => dispatch(errorHandlerActions.closeErrorModal())\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateOwner);"],"sourceRoot":""}