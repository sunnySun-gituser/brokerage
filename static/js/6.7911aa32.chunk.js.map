{"version":3,"sources":["store/actions/errorHandlerActions.js","axios/axios.js","store/actions/repositoryActions.js","components/Modals/SuccessModal/SuccessModal.js","components/Modals/ErrorModal/ErrorModal.js","UI/Inputs/Input.js","Utility/AccountFormUtility.js","Utility/returnAccountConfiguration.js","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","constainers/Account/CreateAccount/CreateAccount.js"],"names":["closeErrorModal","error","type","actionTypes","handleHTTPError","props","response","status","execute404Handler","execute500Handler","executeOtherErrorHandler","instance","axios","create","baseURL","headers","headerType","getData","url","console","log","dispatch","get","then","data","catch","errorHandlerActions","postData","obj","post","postDataSuccess","putData","put","putDataSuccess","deleteData","delete","deleteDataSuccess","closeSuccessModal","SuccessModal","show","backdrop","Header","modalHeaderText","Body","modalBodyText","Footer","bsStyle","onClick","successClick","okButtonText","ErrorModal","closeModal","input","inputField","errorMessage","invalid","shouldValidate","touched","elementType","controlId","id","componentClass","ControlLabel","sm","label","value","onChange","changed","onBlur","blur","selected","dateFormat","readOnly","className","showYearDropdown","dropdownMode","convertStateToArrayOfFormObjects","formObject","formElementsArray","key","push","config","executeValidationAndReturnFormElement","event","updatedAccountForm","formElement","target","validationResponse","checkValidity","validation","valid","isValid","validationObject","required","trim","maxLength","length","countInvalidElements","accountForm","element","returnAccountConfiguration","dateCreated","moment","accountType","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","prototype","toString","call","_arr","_n","_d","_e","undefined","_s","_i","next","done","err","TypeError","CreateAccount","ownerId","match","params","useState","setAccountForm","isFormValid","setIsFormValid","useDispatch","useSelector","state","errorHandler","showErrorModal","showSuccessModal","repository","useEffect","formUtilityActions","handleChangeEvent","counter","horizontal","onSubmit","preventDefault","accountToCreate","repositoryActions","map","mdOffset","md","disabled","history"],"mappings":"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","file":"static/js/6.7911aa32.chunk.js","sourcesContent":["import * as actionTypes from './actionTypes';\r\n\r\nconst execute404Handler = (props) => {\r\n    return {\r\n        type: actionTypes.HTTP_404_ERROR,\r\n        props: props\r\n    }\r\n}\r\n\r\nconst execute500Handler = (props) => {\r\n    return {\r\n        type: actionTypes.HTTP_500_ERROR,\r\n        props: props\r\n    }\r\n}\r\n\r\nconst executeOtherErrorHandler = (error) => {\r\n    return {\r\n        type: actionTypes.HTTP_OTHER_ERROR,\r\n        error: error\r\n    }\r\n}\r\n\r\n// no error\r\nexport const closeErrorModal = (error) => {\r\n    return {\r\n        type: actionTypes.CLOSE_ERROR_MODAL\r\n    }\r\n}\r\n\r\nexport const handleHTTPError = (error, props) => {\r\n    if (error.response.status === 404) {\r\n        return execute404Handler(props);\r\n    }\r\n    else if (error.response.status === 500) {\r\n        return execute500Handler(props);\r\n    }\r\n    else {\r\n        return executeOtherErrorHandler(error);\r\n    }\r\n}","import axios from 'axios';\r\n\r\n// axios custom instance: baseUrl and headers properties\r\n// use: axios.get('/api/owner')\r\nconst instance = axios.create({\r\n    //baseURL: 'http://localhost:5000',\r\n    baseURL: 'https://brokerage.herokuapp.com',\r\n    headers:{\r\n        headerType: 'example header type'\r\n    }\r\n});\r\n\r\nexport default instance;","import * as actionTypes from './actionTypes';\r\nimport axios from '../../axios/axios';\r\nimport * as errorHandlerActions from './errorHandlerActions';\r\n\r\nconst getDataSuccess = (data) => {\r\n    return {\r\n        type: actionTypes.GET_DATA_SUCCESS,\r\n        data: data\r\n    }\r\n}\r\n\r\n// counld be response, or resp\r\nexport const getData = (url, props) => {\r\n    console.log('get data')\r\n    return (dispatch) => {\r\n        console.log('before get data')\r\n        axios.get(url)\r\n        .then(response => {\r\n            console.log(response)\r\n            dispatch(getDataSuccess(response.data))\r\n        }).catch(error =>{\r\n            //TODO: handle error when implement\r\n            dispatch(errorHandlerActions.handleHTTPError(error, props));\r\n        })\r\n    }\r\n}\r\nconst postDataSuccess = (response) => {\r\n    return {\r\n        type: actionTypes.POST_DATA_SUCCESS,\r\n        response: response \r\n    }\r\n}\r\n\r\n// counld be response, or resp\r\nexport const postData = (url, obj, props) => {\r\n    return (dispatch) => {\r\n        console.log(\"dispatch= \")\r\n        console.log(\"url=\" + url)\r\n        console.log(obj)\r\n        axios.post(url, obj)\r\n        .then(response => {\r\n            console.log(response)\r\n            dispatch(postDataSuccess(response))\r\n        }).catch(error =>{\r\n            console.log(\"error.response= \", error.response)\r\n            //TODO: handle error when implement\r\n            dispatch(errorHandlerActions.handleHTTPError(error, props));\r\n        })\r\n    }\r\n}\r\n\r\nconst putDataSuccess = (response) => {\r\n    return {\r\n        type: actionTypes.PUT_DATA_SUCCESS,\r\n        response: response \r\n    }\r\n}\r\n\r\n// counld be response, or resp\r\nexport const putData = (url, obj, props) => {\r\n    return (dispatch) => {\r\n        axios.put(url, obj)\r\n        .then(response => {\r\n            dispatch(putDataSuccess(response))\r\n        }).catch(error =>{\r\n            //TODO: handle error when implement\r\n            dispatch(errorHandlerActions.handleHTTPError(error, props));\r\n        })\r\n    }\r\n}\r\n\r\nconst deleteDataSuccess = (response) => {\r\n    return {\r\n        type: actionTypes.DELETE_DATA_SUCCESS,\r\n        response: response \r\n    }\r\n}\r\n\r\n// counld be response, or resp\r\nexport const deleteData = (url, props) => {\r\n    return (dispatch) => {\r\n        axios.delete(url)\r\n        .then(response => {\r\n            dispatch(deleteDataSuccess(response))\r\n        }).catch(error =>{\r\n            //TODO: handle error when implement\r\n            dispatch(errorHandlerActions.handleHTTPError(error, props));\r\n        })\r\n    }\r\n}\r\n\r\n// take 2 params: props, url\r\n// return an object: send them to reducer to change reducer\r\nexport const closeSuccessModal = (props, url) => {\r\n    return {\r\n        type: actionTypes.CLOSE_SUCCESS_MODAL,\r\n        props: props,\r\n        url: url\r\n    }\r\n}","import React, { Fragment } from 'react';\r\nimport { Modal, Button } from 'react-bootstrap';\r\nimport '../ModalStyles.css';\r\n\r\n// Redux: showsuccessfully: props.show\r\n//props.successClick: method click on success modal +\r\n// like pop window\r\nconst SuccessModal = (props) => {\r\n    return (\r\n        <Fragment>\r\n            <Modal show={props.show} backdrop='static'>\r\n                <Modal.Header>\r\n                    {props.modalHeaderText}\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <p>{props.modalBodyText}</p>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button bsStyle=\"success\" onClick={props.successClick}>{props.okButtonText}</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default SuccessModal;","import React, { Fragment } from 'react';\r\nimport { Modal, Button } from 'react-bootstrap';\r\nimport '../ModalStyles.css';\r\n\r\n//onClick={props.closeModal}: show error modal bootstrap\r\nconst ErrorModal = (props) => {\r\n    return (\r\n        <Fragment>\r\n            <Modal show={props.show} backdrop='static'>\r\n                <Modal.Header>\r\n                    {props.modalHeaderText}\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <p>{props.modalBodyText}</p>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button bsStyle=\"danger\" onClick={props.closeModal}>{props.okButtonText}</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default ErrorModal;","import React, { Fragment } from 'react';\r\nimport { FormGroup, Col, FormControl, ControlLabel } from 'react-bootstrap';\r\nimport DatePicker from 'react-datepicker';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport './Input.css';\r\n\r\nconst input = (props) => {\r\n    let inputField = null;\r\n    let errorMessage = null;\r\n\r\n    if(props.invalid && props.shouldValidate && props.touched){\r\n        errorMessage = (<em>{props.errorMessage}</em>);\r\n    }\r\n\r\n    // onBlur={props.blur}: input blur\r\n    // onfocus: run when the cursor into that field\r\n    // onblur: run when out of that field\r\n    // DatePicker: create a calender and selecte the date\r\n    switch (props.elementType) {\r\n        case 'input':\r\n            inputField = (\r\n                <FormGroup controlId={props.id}>\r\n                    <Col componentClass={ControlLabel} sm={2}>\r\n                        {props.label}\r\n                    </Col>\r\n                    <Col sm={6}>\r\n                        <FormControl type={props.type} value={props.value} onChange={props.changed} onBlur={props.blur} />\r\n                    </Col>\r\n                    <Col>\r\n                        <em>{errorMessage}</em>\r\n                    </Col>\r\n                </FormGroup>\r\n            )\r\n            break;\r\n        case 'datePicker':\r\n            inputField = (\r\n                <FormGroup controlId={props.id}>\r\n                    <Col componentClass={ControlLabel} sm={2}>\r\n                        {props.label}\r\n                    </Col>\r\n                    <Col sm={6}>\r\n                        <DatePicker selected={props.value} dateFormat=\"MM/DD/YYYY\" readOnly\r\n                            onChange={props.changed} className='datePickerControl'\r\n                            showYearDropdown dropdownMode=\"select\"/>\r\n                    </Col>\r\n                    <Col>\r\n                        <em>{errorMessage}</em>\r\n                    </Col>\r\n                </FormGroup>\r\n            )\r\n            break;\r\n        default: inputField = null;\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            {inputField}\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default input;","export const convertStateToArrayOfFormObjects = (formObject) => {\r\n    const formElementsArray = [];\r\n    for (let key in formObject) {\r\n        formElementsArray.push({\r\n            id: key,\r\n            config: formObject[key]\r\n        });\r\n    }\r\n\r\n    return formElementsArray;\r\n}\r\n\r\n// copy the form triggle the event\r\n// copy the form element chanaged, get value from the form element: id, dateofbirth, value is the event\r\n// == true: \r\n// validation: inputConfiguration.js\r\n// return isValid, errormessage, then return formElement\r\nexport const executeValidationAndReturnFormElement = (event, updatedAccountForm, id) => {\r\n    let formElement = { ...updatedAccountForm[id] };\r\n    console.log('id='+id)\r\n    formElement.value = id === 'DateCreated' ? event : event.target.value;\r\n    formElement.touched = true;\r\n\r\n    const validationResponse = checkValidity(formElement.value, formElement.validation);\r\n\r\n    formElement.valid = validationResponse.isValid;\r\n    formElement.errorMessage = validationResponse.errorMessage;\r\n\r\n    return formElement;\r\n}\r\n\r\n// get value, and validation\r\n// check required, isValid...\r\n// check main line\r\nconst checkValidity = (value, validation) => {\r\n    let validationObject = {\r\n        isValid: true,\r\n        errorMessage: ''\r\n    };\r\n\r\n    if (validation) {\r\n        if (validation.required) {\r\n            validationObject.isValid = value.trim() !== '';\r\n            validationObject.errorMessage = validationObject.isValid ? '' : 'Field is required';\r\n        }\r\n\r\n        if (validationObject.isValid && validation.maxLength) {\r\n            validationObject.isValid = value.length <= validation.maxLength;\r\n            validationObject.errorMessage = `Not allowed more than ${validation.maxLength} characters`;\r\n        }\r\n\r\n        return validationObject;\r\n    }\r\n    else {\r\n        return validationObject;\r\n    }\r\n}\r\n\r\n// handle change: do validation\r\n// looping each elements form add one to countInvalidElements\r\n// ==0 if are +1, \r\n// 0 or 1\r\nexport const countInvalidElements = (accountForm) => {\r\n    let countInvalidElements = 0;\r\n    for (let element in accountForm) {\r\n        if (!accountForm[element].valid) {\r\n            countInvalidElements = countInvalidElements + 1;\r\n            break;\r\n        }\r\n    }\r\n    return countInvalidElements;\r\n}\r\n","import moment from 'moment';\r\n\r\n// it is better clients side validation or server validation? both\r\n// clients side: vali nice use interface\r\n// server side: validation:\r\n// name address dateofBirth: validation true? false? \r\n// touched: use move the cursor in that field\r\n// if touched is not validate \r\n// value: moment(), for date\r\nexport const returnAccountConfiguration = () => {\r\n    return {\r\n        dateCreated: {\r\n            element: 'datePicker', type: 'text', value: moment(),\r\n            valid: true, touched: false,\r\n            errorMessage: '', label: 'DateCreated:'\r\n        },\r\n        accountType: {\r\n            element: 'input', type: 'text', value: '',\r\n            validation: { required: true, maxLength: 60 }, valid: false, touched: false,\r\n            errorMessage: '', label: 'AccountType:'\r\n        }\r\n    }\r\n}","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}","import React, { useState, useEffect } from 'react';\r\nimport Input from '../../../UI/Inputs/Input';\r\nimport { Form, Well, Button, FormGroup, Col } from 'react-bootstrap';\r\nimport * as formUtilityActions from '../../../Utility/AccountFormUtility'\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport SuccessModal from '../../../components/Modals/SuccessModal/SuccessModal';\r\nimport ErrorModal from '../../../components/Modals/ErrorModal/ErrorModal';\r\nimport * as repositoryActions from '../../../store/actions/repositoryActions';\r\nimport * as errorHandlerActions from '../../../store/actions/errorHandlerActions';\r\nimport { returnAccountConfiguration } from '../../../Utility/returnAccountConfiguration';\r\n\r\n\r\n// connection to reducer: useSelector, useDispatch\r\n// and need actions: repositoryActions.js, errorHandleActions.js\r\nconst CreateAccount = (props) => {\r\n    let ownerId = props.match.params.ownerId;\r\n    console.log('ownerId=' + ownerId)\r\n\r\n    const [accountForm, setAccountForm] = useState({});\r\n    const [isFormValid, setIsFormValid] = useState(false);\r\n    const dispatch = useDispatch();\r\n\r\n    const errorMessage = useSelector(state => state.errorHandler.errorMessage);\r\n    const showErrorModal = useSelector(state => state.errorHandler.showErrorModal);\r\n    const showSuccessModal = useSelector(state => state.repository.showSuccessModal);\r\n\r\n    useEffect(() => {\r\n        setAccountForm(returnAccountConfiguration());\r\n    },[]);\r\n\r\n    const formElementsArray = formUtilityActions.convertStateToArrayOfFormObjects({ ...accountForm });\r\n\r\n    const createAccount = (event) => {\r\n        event.preventDefault();\r\n    \r\n        // create new owner object from the form\r\n        const accountToCreate = {\r\n            dateCreated: accountForm.dateCreated.value,\r\n            accountType: accountForm.accountType.value,\r\n            ownerId: ownerId\r\n        }\r\n        console.log(accountToCreate)\r\n\r\n        const createAccountUrl = 'api/accounts';\r\n        // with the props: for redirect: postData: go to definatoin right click\r\n        // execute500: props is to push error value('/500')repositoryActions\r\n        dispatch(repositoryActions.postData(createAccountUrl, \r\n                                                accountToCreate, \r\n                                                { ...props }));\r\n    }\r\n\r\n    const redirectToOwnerList = () => {\r\n        console.log(props);\r\n        props.history.push('/owner-list');\r\n    }\r\n\r\n    const handleChangeEvent = (event, id) => {\r\n        const updatedAccountForm = { ...accountForm };\r\n        updatedAccountForm[id] = \r\n            formUtilityActions.executeValidationAndReturnFormElement(event, \r\n                                                                    updatedAccountForm, \r\n                                                                    id);\r\n    \r\n        const counter = formUtilityActions.countInvalidElements(updatedAccountForm);\r\n    \r\n        setAccountForm(updatedAccountForm);\r\n        setIsFormValid(counter === 0);\r\n    }\r\n\r\n    return (\r\n        <Well>\r\n            <Form horizontal onSubmit={createAccount}>\r\n                {\r\n                    formElementsArray.map(element => {\r\n                            return <Input key={element.id} elementType={element.config.element}\r\n                            id={element.id} label={element.config.label}\r\n                            type={element.config.type} value={element.config.value}\r\n                            changed={(event) => handleChangeEvent(event, element.id)}\r\n                            errorMessage={element.config.errorMessage}\r\n                            invalid={!element.config.valid} shouldValidate={element.config.validation}\r\n                            touched={element.config.touched}\r\n                            blur={(event) => handleChangeEvent(event, element.id)} />\r\n                    })\r\n                }\r\n                <br />\r\n                <FormGroup>\r\n                        <Col mdOffset={6} md={1}>\r\n                            <Button type='submit' bsStyle='info' disabled={!isFormValid}>Create</Button>\r\n                        </Col>\r\n                        <Col md={1}>\r\n                            <Button bsStyle='danger' onClick={redirectToOwnerList}>Cancel</Button>\r\n                        </Col>\r\n                </FormGroup>\r\n            </Form>\r\n            <SuccessModal show={showSuccessModal}\r\n                    modalHeaderText={'Success message'}\r\n                    modalBodyText={'Action completed successfully'}\r\n                    okButtonText={'OK'}\r\n                    successClick={() => dispatch(repositoryActions.closeSuccessModal({ ...props }, '/owner-List'))} />\r\n            <ErrorModal show={showErrorModal}\r\n                    modalHeaderText={'Error message'}\r\n                    modalBodyText={errorMessage}\r\n                    okButtonText={'OK'} \r\n                    closeModal={() => dispatch(errorHandlerActions.closeErrorModal())} />\r\n        </Well>\r\n    )\r\n}\r\n\r\nexport default CreateAccount;"],"sourceRoot":""}